// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_client_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_client_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_client_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_client_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_client_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_client_2eproto_metadata_getter(int index);
namespace proto {
class Client;
struct ClientDefaultTypeInternal;
extern ClientDefaultTypeInternal _Client_default_instance_;
class MedicalAppointment;
struct MedicalAppointmentDefaultTypeInternal;
extern MedicalAppointmentDefaultTypeInternal _MedicalAppointment_default_instance_;
class MedicalAppointmentList;
struct MedicalAppointmentListDefaultTypeInternal;
extern MedicalAppointmentListDefaultTypeInternal _MedicalAppointmentList_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::Client* Arena::CreateMaybeMessage<::proto::Client>(Arena*);
template<> ::proto::MedicalAppointment* Arena::CreateMaybeMessage<::proto::MedicalAppointment>(Arena*);
template<> ::proto::MedicalAppointmentList* Arena::CreateMaybeMessage<::proto::MedicalAppointmentList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class Client PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Client) */ {
 public:
  inline Client() : Client(nullptr) {}
  virtual ~Client();
  explicit constexpr Client(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Client(const Client& from);
  Client(Client&& from) noexcept
    : Client() {
    *this = ::std::move(from);
  }

  inline Client& operator=(const Client& from) {
    CopyFrom(from);
    return *this;
  }
  inline Client& operator=(Client&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Client& default_instance() {
    return *internal_default_instance();
  }
  static inline const Client* internal_default_instance() {
    return reinterpret_cast<const Client*>(
               &_Client_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Client& a, Client& b) {
    a.Swap(&b);
  }
  inline void Swap(Client* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Client* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Client* New() const final {
    return CreateMaybeMessage<Client>(nullptr);
  }

  Client* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Client>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Client& from);
  void MergeFrom(const Client& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Client* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Client";
  }
  protected:
  explicit Client(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_client_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNomeFieldNumber = 2,
  };
  // required string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // required string nome = 2;
  bool has_nome() const;
  private:
  bool _internal_has_nome() const;
  public:
  void clear_nome();
  const std::string& nome() const;
  void set_nome(const std::string& value);
  void set_nome(std::string&& value);
  void set_nome(const char* value);
  void set_nome(const char* value, size_t size);
  std::string* mutable_nome();
  std::string* release_nome();
  void set_allocated_nome(std::string* nome);
  private:
  const std::string& _internal_nome() const;
  void _internal_set_nome(const std::string& value);
  std::string* _internal_mutable_nome();
  public:

  // @@protoc_insertion_point(class_scope:proto.Client)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nome_;
  friend struct ::TableStruct_client_2eproto;
};
// -------------------------------------------------------------------

class MedicalAppointment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.MedicalAppointment) */ {
 public:
  inline MedicalAppointment() : MedicalAppointment(nullptr) {}
  virtual ~MedicalAppointment();
  explicit constexpr MedicalAppointment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MedicalAppointment(const MedicalAppointment& from);
  MedicalAppointment(MedicalAppointment&& from) noexcept
    : MedicalAppointment() {
    *this = ::std::move(from);
  }

  inline MedicalAppointment& operator=(const MedicalAppointment& from) {
    CopyFrom(from);
    return *this;
  }
  inline MedicalAppointment& operator=(MedicalAppointment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MedicalAppointment& default_instance() {
    return *internal_default_instance();
  }
  static inline const MedicalAppointment* internal_default_instance() {
    return reinterpret_cast<const MedicalAppointment*>(
               &_MedicalAppointment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MedicalAppointment& a, MedicalAppointment& b) {
    a.Swap(&b);
  }
  inline void Swap(MedicalAppointment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MedicalAppointment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MedicalAppointment* New() const final {
    return CreateMaybeMessage<MedicalAppointment>(nullptr);
  }

  MedicalAppointment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MedicalAppointment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MedicalAppointment& from);
  void MergeFrom(const MedicalAppointment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MedicalAppointment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.MedicalAppointment";
  }
  protected:
  explicit MedicalAppointment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_client_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDateTimeFieldNumber = 2,
    kClientFieldNumber = 1,
  };
  // required string date_time = 2;
  bool has_date_time() const;
  private:
  bool _internal_has_date_time() const;
  public:
  void clear_date_time();
  const std::string& date_time() const;
  void set_date_time(const std::string& value);
  void set_date_time(std::string&& value);
  void set_date_time(const char* value);
  void set_date_time(const char* value, size_t size);
  std::string* mutable_date_time();
  std::string* release_date_time();
  void set_allocated_date_time(std::string* date_time);
  private:
  const std::string& _internal_date_time() const;
  void _internal_set_date_time(const std::string& value);
  std::string* _internal_mutable_date_time();
  public:

  // required .proto.Client client = 1;
  bool has_client() const;
  private:
  bool _internal_has_client() const;
  public:
  void clear_client();
  const ::proto::Client& client() const;
  ::proto::Client* release_client();
  ::proto::Client* mutable_client();
  void set_allocated_client(::proto::Client* client);
  private:
  const ::proto::Client& _internal_client() const;
  ::proto::Client* _internal_mutable_client();
  public:
  void unsafe_arena_set_allocated_client(
      ::proto::Client* client);
  ::proto::Client* unsafe_arena_release_client();

  // @@protoc_insertion_point(class_scope:proto.MedicalAppointment)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_time_;
  ::proto::Client* client_;
  friend struct ::TableStruct_client_2eproto;
};
// -------------------------------------------------------------------

class MedicalAppointmentList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.MedicalAppointmentList) */ {
 public:
  inline MedicalAppointmentList() : MedicalAppointmentList(nullptr) {}
  virtual ~MedicalAppointmentList();
  explicit constexpr MedicalAppointmentList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MedicalAppointmentList(const MedicalAppointmentList& from);
  MedicalAppointmentList(MedicalAppointmentList&& from) noexcept
    : MedicalAppointmentList() {
    *this = ::std::move(from);
  }

  inline MedicalAppointmentList& operator=(const MedicalAppointmentList& from) {
    CopyFrom(from);
    return *this;
  }
  inline MedicalAppointmentList& operator=(MedicalAppointmentList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MedicalAppointmentList& default_instance() {
    return *internal_default_instance();
  }
  static inline const MedicalAppointmentList* internal_default_instance() {
    return reinterpret_cast<const MedicalAppointmentList*>(
               &_MedicalAppointmentList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MedicalAppointmentList& a, MedicalAppointmentList& b) {
    a.Swap(&b);
  }
  inline void Swap(MedicalAppointmentList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MedicalAppointmentList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MedicalAppointmentList* New() const final {
    return CreateMaybeMessage<MedicalAppointmentList>(nullptr);
  }

  MedicalAppointmentList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MedicalAppointmentList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MedicalAppointmentList& from);
  void MergeFrom(const MedicalAppointmentList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MedicalAppointmentList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.MedicalAppointmentList";
  }
  protected:
  explicit MedicalAppointmentList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_client_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMedicalAppointmentsFieldNumber = 1,
  };
  // repeated .proto.MedicalAppointment medical_appointments = 1;
  int medical_appointments_size() const;
  private:
  int _internal_medical_appointments_size() const;
  public:
  void clear_medical_appointments();
  ::proto::MedicalAppointment* mutable_medical_appointments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::MedicalAppointment >*
      mutable_medical_appointments();
  private:
  const ::proto::MedicalAppointment& _internal_medical_appointments(int index) const;
  ::proto::MedicalAppointment* _internal_add_medical_appointments();
  public:
  const ::proto::MedicalAppointment& medical_appointments(int index) const;
  ::proto::MedicalAppointment* add_medical_appointments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::MedicalAppointment >&
      medical_appointments() const;

  // @@protoc_insertion_point(class_scope:proto.MedicalAppointmentList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::MedicalAppointment > medical_appointments_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Client

// required string id = 1;
inline bool Client::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Client::has_id() const {
  return _internal_has_id();
}
inline void Client::clear_id() {
  id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Client::id() const {
  // @@protoc_insertion_point(field_get:proto.Client.id)
  return _internal_id();
}
inline void Client::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:proto.Client.id)
}
inline std::string* Client::mutable_id() {
  // @@protoc_insertion_point(field_mutable:proto.Client.id)
  return _internal_mutable_id();
}
inline const std::string& Client::_internal_id() const {
  return id_.Get();
}
inline void Client::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Client::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.Client.id)
}
inline void Client::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:proto.Client.id)
}
inline void Client::set_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.Client.id)
}
inline std::string* Client::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Client::release_id() {
  // @@protoc_insertion_point(field_release:proto.Client.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Client::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.Client.id)
}

// required string nome = 2;
inline bool Client::_internal_has_nome() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Client::has_nome() const {
  return _internal_has_nome();
}
inline void Client::clear_nome() {
  nome_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Client::nome() const {
  // @@protoc_insertion_point(field_get:proto.Client.nome)
  return _internal_nome();
}
inline void Client::set_nome(const std::string& value) {
  _internal_set_nome(value);
  // @@protoc_insertion_point(field_set:proto.Client.nome)
}
inline std::string* Client::mutable_nome() {
  // @@protoc_insertion_point(field_mutable:proto.Client.nome)
  return _internal_mutable_nome();
}
inline const std::string& Client::_internal_nome() const {
  return nome_.Get();
}
inline void Client::_internal_set_nome(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  nome_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Client::set_nome(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  nome_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.Client.nome)
}
inline void Client::set_nome(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  nome_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:proto.Client.nome)
}
inline void Client::set_nome(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  nome_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.Client.nome)
}
inline std::string* Client::_internal_mutable_nome() {
  _has_bits_[0] |= 0x00000002u;
  return nome_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Client::release_nome() {
  // @@protoc_insertion_point(field_release:proto.Client.nome)
  if (!_internal_has_nome()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return nome_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Client::set_allocated_nome(std::string* nome) {
  if (nome != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  nome_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nome,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.Client.nome)
}

// -------------------------------------------------------------------

// MedicalAppointment

// required .proto.Client client = 1;
inline bool MedicalAppointment::_internal_has_client() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || client_ != nullptr);
  return value;
}
inline bool MedicalAppointment::has_client() const {
  return _internal_has_client();
}
inline void MedicalAppointment::clear_client() {
  if (client_ != nullptr) client_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::proto::Client& MedicalAppointment::_internal_client() const {
  const ::proto::Client* p = client_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Client&>(
      ::proto::_Client_default_instance_);
}
inline const ::proto::Client& MedicalAppointment::client() const {
  // @@protoc_insertion_point(field_get:proto.MedicalAppointment.client)
  return _internal_client();
}
inline void MedicalAppointment::unsafe_arena_set_allocated_client(
    ::proto::Client* client) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_);
  }
  client_ = client;
  if (client) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.MedicalAppointment.client)
}
inline ::proto::Client* MedicalAppointment::release_client() {
  _has_bits_[0] &= ~0x00000002u;
  ::proto::Client* temp = client_;
  client_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto::Client* MedicalAppointment::unsafe_arena_release_client() {
  // @@protoc_insertion_point(field_release:proto.MedicalAppointment.client)
  _has_bits_[0] &= ~0x00000002u;
  ::proto::Client* temp = client_;
  client_ = nullptr;
  return temp;
}
inline ::proto::Client* MedicalAppointment::_internal_mutable_client() {
  _has_bits_[0] |= 0x00000002u;
  if (client_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Client>(GetArena());
    client_ = p;
  }
  return client_;
}
inline ::proto::Client* MedicalAppointment::mutable_client() {
  // @@protoc_insertion_point(field_mutable:proto.MedicalAppointment.client)
  return _internal_mutable_client();
}
inline void MedicalAppointment::set_allocated_client(::proto::Client* client) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete client_;
  }
  if (client) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(client);
    if (message_arena != submessage_arena) {
      client = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  client_ = client;
  // @@protoc_insertion_point(field_set_allocated:proto.MedicalAppointment.client)
}

// required string date_time = 2;
inline bool MedicalAppointment::_internal_has_date_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MedicalAppointment::has_date_time() const {
  return _internal_has_date_time();
}
inline void MedicalAppointment::clear_date_time() {
  date_time_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MedicalAppointment::date_time() const {
  // @@protoc_insertion_point(field_get:proto.MedicalAppointment.date_time)
  return _internal_date_time();
}
inline void MedicalAppointment::set_date_time(const std::string& value) {
  _internal_set_date_time(value);
  // @@protoc_insertion_point(field_set:proto.MedicalAppointment.date_time)
}
inline std::string* MedicalAppointment::mutable_date_time() {
  // @@protoc_insertion_point(field_mutable:proto.MedicalAppointment.date_time)
  return _internal_mutable_date_time();
}
inline const std::string& MedicalAppointment::_internal_date_time() const {
  return date_time_.Get();
}
inline void MedicalAppointment::_internal_set_date_time(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  date_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MedicalAppointment::set_date_time(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  date_time_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.MedicalAppointment.date_time)
}
inline void MedicalAppointment::set_date_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  date_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:proto.MedicalAppointment.date_time)
}
inline void MedicalAppointment::set_date_time(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  date_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.MedicalAppointment.date_time)
}
inline std::string* MedicalAppointment::_internal_mutable_date_time() {
  _has_bits_[0] |= 0x00000001u;
  return date_time_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MedicalAppointment::release_date_time() {
  // @@protoc_insertion_point(field_release:proto.MedicalAppointment.date_time)
  if (!_internal_has_date_time()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return date_time_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MedicalAppointment::set_allocated_date_time(std::string* date_time) {
  if (date_time != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  date_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), date_time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.MedicalAppointment.date_time)
}

// -------------------------------------------------------------------

// MedicalAppointmentList

// repeated .proto.MedicalAppointment medical_appointments = 1;
inline int MedicalAppointmentList::_internal_medical_appointments_size() const {
  return medical_appointments_.size();
}
inline int MedicalAppointmentList::medical_appointments_size() const {
  return _internal_medical_appointments_size();
}
inline void MedicalAppointmentList::clear_medical_appointments() {
  medical_appointments_.Clear();
}
inline ::proto::MedicalAppointment* MedicalAppointmentList::mutable_medical_appointments(int index) {
  // @@protoc_insertion_point(field_mutable:proto.MedicalAppointmentList.medical_appointments)
  return medical_appointments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::MedicalAppointment >*
MedicalAppointmentList::mutable_medical_appointments() {
  // @@protoc_insertion_point(field_mutable_list:proto.MedicalAppointmentList.medical_appointments)
  return &medical_appointments_;
}
inline const ::proto::MedicalAppointment& MedicalAppointmentList::_internal_medical_appointments(int index) const {
  return medical_appointments_.Get(index);
}
inline const ::proto::MedicalAppointment& MedicalAppointmentList::medical_appointments(int index) const {
  // @@protoc_insertion_point(field_get:proto.MedicalAppointmentList.medical_appointments)
  return _internal_medical_appointments(index);
}
inline ::proto::MedicalAppointment* MedicalAppointmentList::_internal_add_medical_appointments() {
  return medical_appointments_.Add();
}
inline ::proto::MedicalAppointment* MedicalAppointmentList::add_medical_appointments() {
  // @@protoc_insertion_point(field_add:proto.MedicalAppointmentList.medical_appointments)
  return _internal_add_medical_appointments();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::MedicalAppointment >&
MedicalAppointmentList::medical_appointments() const {
  // @@protoc_insertion_point(field_list:proto.MedicalAppointmentList.medical_appointments)
  return medical_appointments_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_client_2eproto
